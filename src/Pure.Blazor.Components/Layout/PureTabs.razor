@inherits PureComponent
<CascadingValue Value="this">
    <section role="tabpanel" class="@ApplyStyle("text-gray-900 body-font flex flex-col")">
        <div role="tablist" class="@ApplyStyle("flex w-full border-b-1 border-neutral-200")">
            @foreach (var tab in Tabs)
            {
                <PureTabButton
                    Title="@tab.Title"
                    IsActive="@(CurrentTab == tab)"
                    Size="Size"
                    OnKeyboardNavigation="KeyboardNavigation"
                    OnClick="@(async () => await ChangeTab(tab))" Variant="Variant"/>
            }

        </div>
        <div>
            @ChildContent
        </div>
    </section>
</CascadingValue>

@code {
    // enable endless tab cycle
    // if true, when you reach the last tab and press right arrow, it will go to the first tab
    private bool useEndlessTabCycle = false;
    [Parameter] public EventCallback OnChanging { get; set; }

    [Parameter] public TabVariant Variant { get; set; }

    [Parameter] public PureSize Size { get; set; } = PureSize.Medium;

    public PureTabContent? CurrentTab { get; set; }
    private string InternalCss { get; set; } = "";


    internal List<PureTabContent> Tabs { get; set; } = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        BuildCss();
    }

    internal async Task KeyboardNavigation(KeyboardDirection direction)
    {
        if (CurrentTab == null)
        {
            CurrentTab = Tabs.FirstOrDefault();
            return;
        }

        var currentIndex = Tabs.IndexOf(CurrentTab);
        var nextIndex = direction switch
        {
            KeyboardDirection.Backward when currentIndex > 0 => currentIndex - 1,
            KeyboardDirection.Forward when currentIndex < Tabs.Count - 1 => currentIndex + 1,
            KeyboardDirection.Backward when useEndlessTabCycle => Tabs.Count - 1,
            KeyboardDirection.Forward when useEndlessTabCycle => 0,
            _ => currentIndex
        };

        await ChangeTab(Tabs[nextIndex]);
    }

    internal async Task ChangeTab(PureTabContent tab)
    {
        Console.WriteLine("Changing tab");
        await OnChanging.InvokeAsync();
        await tab.OnChanging.InvokeAsync();

        CurrentTab = tab;
    }

    protected override void BuildCss()
    {
    }

    internal void AddTab(PureTabContent tab)
    {
        Tabs.Add(tab);

        if (CurrentTab == null)
        {
            CurrentTab = tab;
        }

        StateHasChanged();
    }

}

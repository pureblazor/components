<div class="mt-2 space-y-4">
    <div class="relative flex items-start">
        <div class="absolute flex h-6 items-center">
            <input id="@Id" value="@Value" name="@ParentRadioGroup.Name"
                   @onclick="HandleOnClick"
                   aria-describedby="@($"{@Value}-radio-Description")"
                   type="radio" class="h-4 w-4 border-gray-300 text-brand-600 focus:ring-brand-600"
                   checked="@Checked" />
        </div>
        <div class="pl-7 text-sm leading-6">
            <label for="@Id" class="font-medium text-gray-900">@(Title ?? Value)</label>
            @if (!String.IsNullOrEmpty(@Description))
            {
                <p id="@($"{@Value}-radio-Description")" class="text-gray-500">@Description</p>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private PureRadioGroup ParentRadioGroup { get; set; } 

    [Parameter, EditorRequired]
    public string Value { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string Description { get; set; } = String.Empty;

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public string Id { get; set; }

    protected override void OnInitialized()
    {        
        if (ParentRadioGroup == null)
            throw new ArgumentNullException(nameof(ParentRadioGroup), "PureRadio must exist within a PureRadioGroup");

        //Check a better way to set unique id
        Id = ParentRadioGroup.Name + new Random().Next(0, 1000).ToString();

        if (!String.IsNullOrEmpty(ParentRadioGroup.CheckedValue))
        {
            if (ParentRadioGroup.CheckedValue == Value)
            {
                Checked = true;
            }
            else
            {
                Checked = false;
            }
        }
        else if (Checked)
        {
            ParentRadioGroup.CheckedValue = Value;
        }
        ParentRadioGroup.ValuesChanged += () => StateHasChanged();
        ParentRadioGroup.AddButton(this);


        base.OnInitialized();
    }

    private async Task HandleOnClick()
    {
        await ParentRadioGroup.OnValueChange(Value);
        StateHasChanged();
    }
}

@using System.Text.RegularExpressions

<CascadingValue Value="this">
    <fieldset>
        @if (!String.IsNullOrEmpty(Title))
        {
            <legend class="text-sm font-medium leading-6 text-gray-900">@Title</legend>
        }
        @ChildContent
        @if (@ChildContent is null)
        {
            @foreach (var option in @Items)
            {
                <PureRadio Checked="@(option.Checked)" Description="@(option.Description)" Title="@(option.Title)" Value="@(option.Value)" Id="@(option.Id)" />
            }

        }
        else
        {
            @foreach(var option in @Items)
            {
                if(option.Value == CheckedValue)
                {
                    @option.ChildContent
                }
            }
        }
    </fieldset>
</CascadingValue>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public List<PureRadio> Items { get; set; } = new();

    [Parameter, EditorRequired]
    public string Name { get; set; }

    [Parameter]
    public string CheckedValue { get; set; }

    [Parameter]
    public EventCallback<string> OnRadioChanged { get; set; }

    public Action ValuesChanged;

    protected override void OnInitialized()
    {
        // Check a better way to set unique radioGroup name
        Name = Name + Utilities.NamingUtils.CreateRandomizedId();

        Items.ForEach(item =>
        {
            if (string.IsNullOrEmpty(item.Id))
                item.Id = Name + Utilities.NamingUtils.CreateRandomizedId();
        });

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public async Task OnValueChange(string value)
    {
        bool valueChanged = value != CheckedValue;

        CheckedValue = value;
        await OnRadioChanged.InvokeAsync(value);
        if (valueChanged)
        {
            ValuesChanged.Invoke();
        }
    }
    public void AddButton(PureRadio radio)
    {
        Items.Add(radio);
        StateHasChanged();
    }
}

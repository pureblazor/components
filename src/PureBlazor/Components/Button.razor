@using TailwindMerge
@inject TwMerge TwMerge
<button @attributes="AdditionalAttributes"
        class="@(TwMerge.Merge(CssClass, AdditionalAttributes?.GetValueOrDefault("class")?.ToString()))"
        @onclick="OnClick" disabled="@Loading">
    @ChildContent
</button>

@code {

    /// <summary>
    /// We store the variant as a string. This enables us to add more variants at runtime.
    ///
    /// The published API is an enum for built-in variants. We may later add a parameter for custom variants. Ideally,
    /// we could coerce or accept a discriminated union here and maintain 1 parameter.
    /// </summary>
    private string? variant;

    /// <summary>
    /// We store the size as a string, for the same reasons as the variant.
    /// </summary>
    private string? size;

    protected override void OnParametersSet()
    {
        variant = Variant switch
        {
            Variants.Primary => "primary",
            Variants.Secondary => "secondary",
            Variants.Destructive => "destructive",
            Variants.Outline => "outline",
            Variants.Ghost => "ghost",
            _ => null
        };

        size = Size switch
        {
            Sm => "sm",
            Lg => "lg",
            _ => null
        };
    }

    /// <summary>
    /// Use a built-in variant.
    /// </summary>
    [Parameter]
    public Variants? Variant { get; set; }

    [Parameter] public Sizes? Size { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool Loading { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Generate the CSS classes from multi-level variants: (variant) + (size).
    /// </summary>
    private string CssClass => ButtonVariants.Default.GenerateClass(
        ("variant", variant),
        ("size", size ?? "sm")
    );
}

@namespace Pure.Blazor.Components
@inherits PureComponent
@using Microsoft.AspNetCore.Components.Forms
<div class="flex flex-col relative">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        if (LabelType == PureLabelType.Default)
        {
            <PureLabel For="@Id">@Label</PureLabel>
        }
    }
    <InputSelect class="@ApplyStyle($"{Css.Base} {Css.Size(Size)}")"
                 id="@Id"
                 Value="Value"
                 ValueExpression="() => Value"
                 ValueChanged="@((string s) => Pick(s))">
        @ChildContent
    </InputSelect>
</div>

@code {
    [Parameter, EditorRequired] public required string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback<string> OnSelected { get; set; }

    /// <summary>
    /// ID attribute for the input element. Defaults to a unique ID.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = $"select-{Guid.NewGuid()}";

    /// <summary>
    ///     Optional label (recommended)
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    ///     Optional helper text
    /// </summary>
    [Parameter]
    public string? HelperText { get; set; }

    /// <summary>
    /// The name attribute for the input element.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    ///     Optional label type
    /// </summary>
    [Parameter]
    public PureLabelType LabelType { get; set; }

    [Parameter] public PureSize Size { get; set; } = PureSize.Medium;

    /// <summary>
    ///     Makes the input required.
    /// </summary>
    [Parameter]
    public bool? Required { get; set; }

    private void Pick(string s)
    {
        Value = s;
        OnSelected.InvokeAsync(Value);
        ValueChanged.InvokeAsync(Value);
    }
}

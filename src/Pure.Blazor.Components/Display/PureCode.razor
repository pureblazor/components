@namespace Pure.Blazor.Components
@inherits PureComponent
@using Microsoft.JSInterop
@using Pure.Blazor.Components.Display
@* @implements IAsyncDisposable *@
@* @implements IHandleEvent *@
@inject IJSRuntime JS

<figure class="@Styles relative">
    @* <PureIconButton *@
    @*     OnClick="CopyToClipboard" *@
    @*     Icon="IconCopy" *@
    @*     Variant="ButtonVariant.Subtle" *@
    @*     Accent="Accent.Default" *@
    @*     Size="PureSize.Small"/> *@
    <figcaption class="font-semibold text-sm tracking-wide">@Caption</figcaption>
    <pre class="rounded-lg bg-gray-800 text-gray-200 px-4 py-2 text-sm font-normal font-mono leading-6 overflow-auto">
        <code class="break-normal @LanguageClass" @ref="@ElementReference">
                @if (ChildContent is not null)
                {
                    @ChildContent
                }
                else if (!string.IsNullOrWhiteSpace(Text))
                {
                    @Highlighter.Highlight(Text, "razor")
                }
        </code>
    </pre>
</figure>

@code {

    // handy helpers for callers
    // not all supported languages from prism have been added:
    // https://prismjs.com/index.html#supported-languages
    public static string Html = "html";
    public static string Markup = "markup";
    public static string Xml = "xml";
    public static string Svg = "svg";
    public static string MathMl = "mathml";
    public static string Rss = "rss";
    public static string Stylesheet = "css";
    public static string Javascript = "js";
    public static string Razor = "razor";
    public static string Shell = "sh";

    public static string Csharp = "csharp";

    public SyntaxHighligher Highlighter = new();
    // protobuf
    // powershell
    // solution file
    // solidity file
    // sql file
    // typescript file
    // yaml file

    private string LanguageClass => $"language-{language}";

    // default to html unless language is specifically supplied
    private string language => !string.IsNullOrWhiteSpace(Language) ? Language : Html;

    private ElementReference ElementReference { get; set; }
    [Parameter] public string? Caption { get; set; }

    [Parameter] public string? Language { get; set; }

    [Parameter] public string? Text { get; set; }
    // private IJSObjectReference? module;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         module = await JS.Razor("Display/PureCode");
    //         await module.InvokeVoidAsync("highlight");
    //     }
    // }

    protected override bool ShouldRender()
    {
        return false;
    }
    //
    // Task IHandleEvent.HandleEventAsync(
    //     EventCallbackWorkItem callback, object? arg) => callback.InvokeAsync(arg);

    private Task CopyToClipboard()
    {
        return Task.CompletedTask;
        // if (module is null)
        // {
        //     return;
        // }
        //
        // var text = Text;
        // if (ChildContent is not null)
        // {
        //     Logger.LogInformation("Copying to clipboard from child content");
        //     text = await module.InvokeAsync<string>("getText", ElementReference);
        // }
        // else
        // {
        //     Logger.LogInformation("Copying to clipboard from text");
        // }
        //
        // await module.InvokeVoidAsync("copyToClipboard", text);
    }

    // async ValueTask IAsyncDisposable.DisposeAsync()
    // {
    //     if (module is not null)
    //     {
    //         await module.DisposeAsync();
    //     }
    // }

}

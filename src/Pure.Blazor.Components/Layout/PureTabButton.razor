@using System.Text
@inherits PureComponent
<button @ref="_elementReference" tabindex="@(IsActive ? 0 : -1)" @onclick="@((e) => { Console.WriteLine("clicked"); OnClick.InvokeAsync(e); })" class="@ApplyStyle(InternalCss)" @onkeyup="OnKeyUp" role="tab">
    <!-- todo: icon -->
    @Title
</button>

@code {
    private ElementReference? _elementReference;
    private bool prevStateActive = false;
    [Parameter] public string Title { get; set; } = string.Empty;

    [Parameter] public bool IsActive { get; set; }

    [Parameter] public TabVariant Variant { get; set; }

    [Parameter] public PureSize Size { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public EventCallback<KeyboardDirection> OnKeyboardNavigation { get; set; }

    public void OnKeyUp(KeyboardEventArgs e)
    {
        if (e.IsHorizontalArrow())
        {
            OnKeyboardNavigation.InvokeAsync(e.ToKeyboardDirection());
        }
    }

    private string InternalCss { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (_elementReference is null)
        {
            return;
        }

        if (!prevStateActive && IsActive)
        {
            try
            {
                await _elementReference.Value.FocusAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        prevStateActive = IsActive;
    }

    protected override void BuildCss()
    {
        var builder = new StringBuilder(Css.Base);
        builder.Append(" " + Css.Sizes[Size]);

        switch (Variant)
        {
            case TabVariant.Default when IsActive:
                builder.Append(" border-b-2 border-brand-600 cursor-pointer focus-visible:outline-transparent");
                break;
            case TabVariant.Default when !IsActive:
                builder.Append(" border-b-2 border-gray-300 cursor-pointer focus-visible:outline-transparent");
                break;
            case TabVariant.Outline when IsActive:
                builder.Append(" border-1 rounded-t-sm border-gray-200 border-b-white bg-white cursor-default hover:bg-gray-50 relative top-px");

                break;
            case TabVariant.Outline when !IsActive:
                builder.Append(" border-1 rounded-t-sm border-transparent cursor-default hover:bg-gray-50 relative top-px");
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        InternalCss = builder.ToString();
    }

}

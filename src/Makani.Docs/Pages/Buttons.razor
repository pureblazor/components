@page "/components/buttons"

<div class="grid grid-cols-4 pt-10">
    <div class="hidden sm:block sm:col-span-1">
        <PureVertNav />        
    </div>
    <div class="col-span-4 sm:col-span-3">
        <PureText Type="Typo.H4">Components</PureText>
        <PureText Type="Typo.H1" Id="buttons">Buttons</PureText>
        <div class="mb-10">
            <DocumentationCard Component="typeof(PureButton)">
                <Documentation>
                    <EditForm Model="Model">
                        <div class="flex justify-between divide-x">
                            <div class="flex items-center justify-center w-2/3">
                                <PureButton Color="@Model.CurrentColor" Size="@Model.CurrentSize" Variant="@Model.CurrentVariant">Settings</PureButton>
                            </div>
                            <div class="flex flex-col w-1/3 p-2">
                                <div class="px-1.5"><strong>Color</strong></div>
                                <div class="flex flex-wrap justify-center mb-2">
                                    @foreach (var color in Colors)
                                    {
                                        <div class="pr-0.5">
                                            <PureButton Color="color" OnClick="() => ChangeColor(color)"></PureButton>
                                        </div>
                                    }
                                </div>
                                <div class="px-1.5"><strong>Variant</strong></div>
                                <div class="px-1 mb-2">
                                    <InputSelect class="px-4 py-1.5 border rounded-sm w-full" @bind-Value="Model.CurrentVariant">
                                        <option value="@ButtonVariant.Filled">Filled</option>
                                        <option value="@ButtonVariant.Outline">Outline</option>
                                        <option value="@ButtonVariant.Default">Default</option>
                                        <option value="@ButtonVariant.Subtle">Subtle</option>
                                    </InputSelect>
                                </div>
                                <div class="px-1.5"><strong>Size</strong></div>
                                <div class="px-1 mb-2">
                                    <InputSelect class="px-4 py-1.5 border rounded-sm w-full" @bind-Value="Model.CurrentSize">
                                        <option value="@PureSize.ExtraSmall">Extra Small</option>
                                        <option value="@PureSize.Small">Small</option>
                                        <option value="@PureSize.Medium">Medium</option>
                                        <option value="@PureSize.Large">Large</option>
                                    </InputSelect>
                                </div>
                                <div class="px-1.5"><strong>Shade</strong></div>

                                <div class="px-1">
                                    <InputSelect class="px-4 py-1.5 border rounded-sm w-full" ValueExpression="() => Model.CurrentShade" Value="Model.CurrentShade" ValueChanged="(string value) => OnShadeChanged(value)">
                                        <option value="0">0</option>
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                        <option value="6">6</option>
                                        <option value="7">7</option>
                                        <option value="8">8</option>
                                        <option value="9">9</option>
                                        <option value="10">10</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </Documentation>
                <ComponentParams>
                    
                </ComponentParams>
            </DocumentationCard> 
        </div>
    </div>
</div>

@code {
    public class ButtonModel
    {
        public ColorWithShade CurrentColor { get; set; } = PureColor.Blue;

        public PureSize CurrentSize { get; set; } = PureSize.Small;
        public ButtonVariant CurrentVariant { get; set; } = ButtonVariant.Filled;
        public string CurrentShade { get; set; } = "5";
    }

    public ButtonModel Model = new();
    public List<ColorWithShade> Colors { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadColors();
    }

    private void OnShadeChanged(string value)
    {
        Model.CurrentShade = value;
        var shade = Convert.ToInt32(Model.CurrentShade);
        foreach (var color in Colors)
        {
            color.Shade = shade;
        }

        Model.CurrentColor.Shade = shade;
    }

    private void LoadColors()
    {
        Colors = typeof(PureColor)
    .GetProperties(System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public)
    .Select(p => p.GetValue(null))
    .Cast<ColorWithShade>().ToList();
    }

    public void ChangeColor(ColorWithShade color)
    {
        Model.CurrentColor = color;
        StateHasChanged();
    }

    public int Count { get; set; } = 0;

    private string buttons = @"<PureButton Color=""PureColor.Blue"" Size=""PureSize.Medium"" Variant=""ButtonVariant.Filled""></PureButton>
<PureButton Color=""PureColor.Blue.One"" Size=""PureSize.Medium"" Variant=""ButtonVariant.Filled""></PureButton>
";


    private string buttonsWithActions = @"<PureButton OnClick=""() => { Count++; }"">Click me!</PureButton>";
}


<div class="mt-1 flex items-center gap-x-1.5">
    <p class="text-sm leading-6 text-gray-900">@Title</p>
    <div class="flex-none rounded-full p-1 @(backgroundStatusColor)">
        <div class="h-1.5 w-1.5 rounded-full @(foregroundStatusColor)"></div>
    </div>
    <p class="text-xs leading-5 text-gray-500">@Status</p>
</div>

@code {
    [Parameter]
    public string Title { get; set;}

    [Parameter]
    public string Status { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public string Error { get; set; }

    [Parameter]
    public string Success { get; set; }

    [Parameter]
    public string Warning { get; set; }

    [Parameter]
    public string Brand { get;set; }

    [Parameter]
    public Dictionary<string, ColorWithShade> CustomColorMap { get; set; }

    private string foregroundStatusColor = "";
    private string backgroundStatusColor = "";

    private const string SuccessForegroundClass = "bg-emerald-500";
    private const string SuccessBackgroundClass = "bg-emerald-500/20";

    private const string ErrorForegroundClass = "bg-red-500";
    private const string ErrorBackgroundClass = "bg-red-500/20";

    private const string WarningForegroundClass = "bg-orange-500";
    private const string WarningBackgroundClass = "bg-orange-500/20";

    private const string BrandForegroundClass = "bg-brand-500";
    private const string BrandBackgroundClass = "bg-brand-500/20";


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BuildCss();
    }

    public virtual void BuildCss()
    {
        string color = null;
        if (Value == Success)
        {
            foregroundStatusColor = SuccessForegroundClass;
            backgroundStatusColor = SuccessBackgroundClass;
            return;
        } else if (Value == Error)
        {
            foregroundStatusColor = ErrorForegroundClass;
            backgroundStatusColor = ErrorBackgroundClass;
            return;
        } else if (Value == Warning)
        {
            foregroundStatusColor = WarningForegroundClass;
            backgroundStatusColor = WarningBackgroundClass;
            return;
        }else if(Value == Brand)
        {
            foregroundStatusColor = BrandForegroundClass;
            backgroundStatusColor = BrandBackgroundClass;
            return;
        }

        if (CustomColorMap is not null && CustomColorMap.ContainsKey(Value))
        {
            var tailwindbuilder = TailwindBuilder.New();

            var mappedStyle = CustomColorMap[Value];
            foregroundStatusColor = $"bg-{mappedStyle.BaseColor}-500";
            backgroundStatusColor = $"bg-{mappedStyle.BaseColor}-500/20";
        }
             }

}

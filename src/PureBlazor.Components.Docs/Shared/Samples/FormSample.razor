@inject ILogger<FormSample> Log
@inject ToastService Service

<PureText Type="Typo.H2" Id="textfield">TextField (preview)</PureText>
<div class="mb-10">
    <PureText Type="Typo.H3">Sizing</PureText>
    <PureText Type="Typo.Body" Css="mb-4">
        Control the size of <PureInlineCode>PureTextField</PureInlineCode> by using <PureLink Url="https://tailwindcss.com/docs/grid-template-columns" Target="LinkTarget.NewTab">Tailwind Grid Template Columns</PureLink>.
    </PureText>
    <div class="grid grid-cols-4 gap-4">
        <div class="col-span-4">
            <PureInput Label="Full width" />
        </div>
        <div class="col-span-2">
            <PureInput Label="Medium width"></PureInput>
        </div>
        <div class="col-start-1 col-span-1">
            <PureInput Label="Small width"></PureInput>
        </div>
    </div>
    <PureCode Text="@markup" Language="@PureCode.Razor" Caption="Example" Css="my-4"></PureCode>
</div>

<div class="mb-10">
    <PureText Type="Typo.H3">Labels</PureText>
    <div class="grid grid-cols-4 gap-4">
        <div class="col-start-1 col-span-2">
            <PureInput Label="Default label"></PureInput>
        </div>
        <div class="col-start-1 col-span-2">
            <PureInput Label="Floating label" LabelType="PureLabelType.Floating"></PureInput>
        </div>
    </div>
    <PureCode Text="@labelTypeMarkup" Language="@PureCode.Razor" Caption="Example" Css="my-4"></PureCode>
</div>

<div class="mb-10">
    <PureText Type="Typo.H3">Adornments</PureText>
    <div class="grid grid-cols-4 gap-4">
        <div class="col-start-1 col-span-2">
            <PureInput Label="Search">
                <Suffix>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 group-hover:text-gray-800 dark:group-hover:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                    </svg>
                </Suffix>
            </PureInput>
        </div>
        <div class="col-start-1 col-span-2">
            <PureInput Label="Search with clickable suffix" HelperText="@($"Clicked {Clicked} times")" OnSuffixClick="(_) => { Clicked++; }">
                <Suffix>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 group-hover:text-gray-800 dark:group-hover:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                    </svg>
                </Suffix>
            </PureInput>
        </div>
        <div class="col-start-1 col-span-2">
            <PureInput Label="Works with floating labels" LabelType="PureLabelType.Floating" HelperText="@($"Clicked {Clicked} times")" OnSuffixClick="(_) => { Clicked++; }">
                <Suffix>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 group-hover:text-gray-800 dark:group-hover:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                    </svg>
                </Suffix>
            </PureInput>
        </div>
    </div>
    <PureCode Text="@suffixMarkup" Language="@PureCode.Razor" Caption="Example" Css="my-4"></PureCode>
</div>

<div class="mb-10">
    <PureText Type="Typo.H3">Data binding</PureText>
    <PureText Type="Typo.Body" Css="mb-4">
        The <PureInlineCode>MkTextField</PureInlineCode> component supports an immediate mode or blur mode. The default is <PureInlineCode>EntryMode.Immediate</PureInlineCode>.
    </PureText>
    <div class="grid grid-cols-4 gap-4 mb-4">
        <div class="col-span-2">
            <PureInput Label="Immediate mode" @bind-Value="Username"></PureInput>
        </div>
        <div class="col-span-2 flex items-end">
            <PureText Type="Typo.Body">Value: @Username</PureText>
            </div>
        </div>
        <div class="grid grid-cols-4 gap-4 mb-4">
            <div class="col-span-2">
                <PureInput Label="Delayed mode" Mode="EntryMode.Blur" HelperText="Hint: hit tab or click outside the input" @bind-Value="Delayed"></PureInput>
            </div>
            <div class="col-span-2 flex items-center">
                <PureText Type="Typo.Body">Value: @Delayed</PureText>
            </div>
        </div>

        <PureText Type="Typo.H3">Validation</PureText>
        <PureText Type="Typo.Body" Css="mb-4">
            <strong>Built-in validation:</strong>
            <ul>
                <li>Required</li>
                <li>Min length</li>
                <li>Max length</li>
            </ul>
        </PureText>
        <div class="grid grid-cols-4 gap-4 mb-4">
            <div class="col-span-2">
                <PureInput Label="Required username" Required="true" OnError="OnRequiredError" @bind-Value="Username"></PureInput>
            </div>
            <div class="col-span-2 flex items-end">
                <PureText Type="Typo.Body">Value: @Username, Error: @RequiredError</PureText>
            </div>
        </div>

        <div class="grid grid-cols-4 gap-4 mb-4">
            <div class="col-span-2">
                <PureInput Label="Min length username" MinLength="3" OnError="OnMinLenError" @bind-Value="Username"></PureInput>
            </div>
            <div class="col-span-2 flex items-end">
                <PureText Type="Typo.Body">Value: @Username, Error: @MinLenError</PureText>
            </div>
        </div>

        <div class="grid grid-cols-4 gap-4 mb-4">
            <div class="col-span-2">
                <PureInput Label="Max length username" MaxLength="10" OnError="OnMaxLenError" @bind-Value="Username"></PureInput>
            </div>
            <div class="col-span-2 flex items-end">
                <PureText Type="Typo.Body">Value: @Username, Error: @MaxLenError</PureText>
            </div>
        </div>
    </div>

    <PureText Type="Typo.H2" Id="radioGroup">Radio (preview)</PureText>
    <div class="mb-5">
        <PureRadioGroup Title="Availability" Name="Gender" CheckedValue="Basic" OnRadioChanged="@OnHandleRadioGroupChange">
            <PureRadio Value="Basic" Description="After a period of inactivity, your site will respond to the next request with a brief delay." />
            <PureRadio Value="Always on" Description="Your site will always be immediately available for incoming traffic." />
        </PureRadioGroup>

        <PureRadioGroup Title="Animals" Name="DomesticAnimals" Items="radios" OnRadioChanged="@OnHandleRadioGroupChange" />
    </div>   
    <PureCode Text="@pureRadioGroupMarkup" Language="@PureCode.Razor" Caption="Example 1" Css="my-4"></PureCode>

    <PureCode Text="@pureRadioGroupMarkup2" Language="@PureCode.Razor" Caption="Example 2" Css="my-4"></PureCode>

    @code {
    public int Clicked { get; set; }

    public string? Username { get; set; }
    public string? Delayed { get; set; }
    public string? RequiredError { get; set; }
    public string? MaxLenError { get; set; }
    public string? MinLenError { get; set; }
    private string labelTypeMarkup = @"<MkTextField Label=""Floating label"" LabelType=""MkLabelType.Floating""></MkTextField>";
    private string markup = @"<div class=""grid grid-cols-4 gap-4"">
    <div class=""col-span-4"">
        <MkTextField Label=""Full width""/>
    </div>
    <div class=""col-span-2"">
        <MkTextField Label=""Medium width"" />
    </div>
    <div class=""col-start-1 col-span-1"">
        <MkTextField Label=""Small width"" />
    </div>
</div>";

    private string suffixMarkup = @"<MkTextField Label=""Search"" OnSuffixClick=""(_) => { Clicked++; }"">
    <Suffix>
        <svg xmlns=""http://www.w3.org/2000/svg"" class=""h-5 w-5 text-gray-500 group-hover:text-gray-800 dark:group-hover:text-gray-300"" viewBox=""0 0 20 20"" fill=""currentColor"" >
            <path fill-rule=""evenodd"" d=""M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"" clip-rule=""evenodd""/>
        </svg>
    </Suffix>
</MkTextField>";

    private string pureRadioGroupMarkup = @"<PureRadioGroup Title=""Availability"" Name=""Gender"" CheckedValue=""Basic"" OnRadioChanged=""@OnHandleRadioGroupChange"">
            <PureRadio Value=""Basic"" Description=""After a period of inactivity, your site will respond to the next request with a brief delay."" />
            <PureRadio Value=""Always on"" Description=""Your site will always be immediately available for incoming traffic."" />
        </PureRadioGroup>";

    private string pureRadioGroupMarkup2 = @"<PureRadioGroup Title=""Animals"" Name=""DomesticAnimals"" Items=""radios"" OnRadioChanged=""@OnHandleRadioGroupChange"" />";

    List<PureRadio> radios = new();

    protected override void OnInitialized()
    {
        radios = new()
        {
            new PureRadio
                {
                    Value = "Cat",
                    Description = "Very independent animal."
                },
            new PureRadio
                {
                    Value = "Dog",
                    Description = "Love giver animal.",
                    Checked = true
                }
        };

        base.OnInitialized();
    }

    async Task OnHandleRadioGroupChange(string selectedValue)
    {
        await Service.AddToast($"Selected radio: {selectedValue}", PureState.Success);
    }

    // todo: integrate form mapping, this ideally should be more dynamic.
    // this is far too verbose and manual for a pleasant dev experience
    public void OnRequiredError(IList<ValidationResult> validation)
    {
        RequiredError = string.Join(',', validation.Select(p => p.Message));
    }

    public void OnMinLenError(IList<ValidationResult> validation)
    {
        MinLenError = string.Join(',', validation.Select(p => p.Message));
    }

    public void OnMaxLenError(IList<ValidationResult> validation)
    {
        MaxLenError = string.Join(',', validation.Select(p => p.Message));
    }
}
@namespace Pure.Blazor.Components
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<TValue>
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@typeparam TValue

<textarea
    class="flex h-10 w-full rounded-md border-1 border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm"
    @attributes="AdditionalAttributes"
    @bind="@CurrentValueAsString"
></textarea>

@code {
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        // Convert the incoming string from the browser into a TValue.
        // If parsing fails or value is null, you may decide how to handle that (e.g. set default(TValue))
        if (BindConverter.TryConvertTo<TValue>(value, CultureInfo.CurrentCulture, out result))
        {
            // Trigger the two-way bind
            _ = ValueChanged.InvokeAsync(result);
            validationErrorMessage = null;
            return true;
        }
        else
        {
            // If conversion fails, you can handle it accordingly,
            // e.g. set to default or leave the old value in place.
            _ = ValueChanged.InvokeAsync(default);
            validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not valid.";
            return false;
        }
    }
}

@namespace Pure.Blazor.Components
@using Microsoft.AspNetCore.Components.Forms

@typeparam T

<InputSelect TValue="T"
             class="flex h-9 items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 w-[180px]"
             id="@Id"
             Value="Value"
             ValueExpression="() => Value"
             ValueChanged="@((T t) => Pick(t))"
             @attributes="AdditionalAttributes">
    @ChildContent
</InputSelect>

@code {
    /// <summary>
    /// The content to be rendered inside the select element, typically option elements.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// The current value of the select component. Can be an enum, string, or int.
    /// </summary>
    [Parameter, EditorRequired]
    public required T Value { get; set; }

    /// <summary>
    /// Callback invoked when the value changes. Supports two-way binding.
    /// </summary>
    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    /// <summary>
    /// Callback invoked when a selection is made.
    /// </summary>
    [Parameter]
    public EventCallback<T> OnSelected { get; set; }

    /// <summary>
    /// Additional HTML attributes to apply to the select element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// ID attribute for the input element. Defaults to a unique ID.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = $"select-{Guid.NewGuid()}";

    /// <summary>
    /// Optional label (recommended).
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Optional helper text.
    /// </summary>
    [Parameter]
    public string? HelperText { get; set; }

    /// <summary>
    /// The name attribute for the input element.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Optional label type.
    /// </summary>
    [Parameter]
    public PureLabelType LabelType { get; set; }

    /// <summary>
    /// Size of the select component.
    /// </summary>
    [Parameter]
    public PureSize Size { get; set; } = PureSize.Medium;

    /// <summary>
    /// Makes the input required.
    /// </summary>
    [Parameter]
    public bool? Required { get; set; }

    private void Pick(T t)
    {
        OnSelected.InvokeAsync(t);
        ValueChanged.InvokeAsync(t);
    }
}
